#+title: «LN exposition»
#+author: Centrix14
#+startup: overview

* «Изложение» языка программирования LN
Это «Изложение» LN — по возможности полное, последовательное, снабжённое пояснениями и примерами описание языка LN.

Soon, I will translate it on English.

** Общие сведения
LN — это язык прокурсионного программирования (от лат. procursus — развитие) и правило-ориентированного программирования. Это означает, что в LN программа есть /целое/, она не делится на модули, на дискретные единицы вообще (функции, процедуры, классы и т.д.) Это не отменяет того, что в рамках одной программы могут быть выделены /органы/, отвечающие за что-то конкретное. Тем не менее, /органы/ не мыслятся как нечто отдельное от всей программы в целом. Программа в прокурсионном программировании мыслится как живой организм, подверженный изменениям.

Основой LN служат Нормальные алгоритмы Маркова (собственно, от них же и произошло название языка: Language of Normal algorithms). Это означает, что вся семантика языка, завязана на правилах и исходных состояниях. 

** Основные понятия
:PROPERTIES:
:CUSTOM_ID: common_concepts
:END:

- Слово — любая /совокупность/ символов, ограниченная пробелами. Служит своего рода клеткой (по аналогии с живыми организмами);
- Последовательность — любая /совокупность/ _слов_, ограниченная специальными словами: =[= и =]=.
- Порядок — /совокупность/ _слов_, выступающая как код (программа). В сущности, _последовательность_ и _порядок_ — одно и то же, разница в восприятии: последовательность, есть совокупность слов, выступающая как данные, порядок же, являет собой совокупность слов, выступающую как код. Кроме того, под порядками понимаются так же и конструкции встроенные в язык (как пример [[*rule]]). В этом смысле, слово «порядок» стоит воспринимать буквально: как заранее определённый порядок следования слов.
- Кроме того, _слово_ и _последовательность_ являются базовыми типами данных.

** Общие соглашения
При записи порядков используются следующие соглашения:
1. Записывается только левая часть порядка (левая часть правила, в терминах НАМ). Правая часть опускается.
   Пример: =my-order a b c=.
   
2. Порядки стоит строить в префиксной форме. Это означает, что если возможна префиксная запись порядка, то она предпочтительна. Возможны исключения: случаи, когда общепринятыми являются иные формы записи. Как пример, запись арифметических операций (инфиксная нотация) или факториала (постфиксная нотация).
   Пример:
   - =f x= (префиксная форма)
   - =a infix+ b= (инфиксная форма)
   
3. В записи порядков, для обозначения типа того или иного слова используются /заполнители/ — слова, обозначающие тип и, опционально, имя слова. Форма заполнителей такова: =.имя-типа=. Кроме того, заполнители могут быть /именоваными/, в таком случае, они выглядят так: =.тип:имя=.
   Пример:
   =var .word .word=
   =var .word:name .word:value=

** Основные порядки
*** rule
Первый и основной порядок В LN это =rule=. =rule= вводит в язык понятие правил подстановки, которые аналогичны таковым в НАМ. Существует лишь одно отличие: в НАМ правила определяются для отдельных символов или их совокупностей. В LN правила определяются для _слов_ и _последовательностей_. Порядок =rule= таков:

#+begin_example
  rule .word .word
  rule .word .seq
  rule .seq .word
  rule .seq .seq
#+end_example

Как можно видеть, за один раз (с применением =rule= единожды) можно задать только одно правило. Сами правила заданы для случаев:
- Слово → слово
- Слово → последовательность
- Последовательность → слово
- Последовательность → Последовательность

*** stop
Порядок =stop= введён в язык с одной единственной целью: предоставить полную реализацию НАМ, в которых, помимо простых правил подстановки, существуют и правила с завершением (=↦=).

Данный порядок в реальных программах использовать не рекомендуется, так как он является элементом императивного программирования, когда как LN — язык ориентированный на прокурсионность.

Форма порядка следующая:

#+begin_example
  stop
#+end_example

Как видно, он не принимает никаких аргументов, и в принципе, является предельно простым.

** Система типов
*** Общие сведения
Система типов LN является иерархической и выглядит так:

#+begin_example
  seq
  └── word
      ├── numeric
      │   └── complex
      │       ├── rational
      │       │   └── integer
      │       └── fraction
      └── symbolic
          ├── character
          └── string
#+end_example

*** Тип =seq=
Тип =seq= является фундаментальным типом языка LN, Он так же является и наиболее общим.

=seq= — это /совокупность/ _слов_, ограниченная специальными словами =[= и =]=. Тип =seq= описывает [[#common_concepts][последовательность]].

Пример:

#+begin_example
  [ 3 "excellent" words ]
#+end_example

*** Тип =word=
Тип =word= описывает [[#common_concepts][слово]] и, наряду с типом =seq= является фундаментальным типом.

=word= — это /совокупность/ _символов_, ограниченная пробелами.

Тип =word= является подтипом =seq=.

Пример:

#+begin_example
  word1
  two words
  "one word"
  [ four words ]
#+end_example

*** Тип =numeric=
В отличие от типов, рассмотренных выше, =numeric= является в известной степени контринтуитивным типом: он описывает "нечто числовое", именно так.

Если говорить конкретнее, то numeric предназначен для описания данных, которые основаны на числах, но при этом корректными числами не являются. Как пример: время и даты. И то и другое основано на числах, но при этом, 12:20 и 07.11.1917 не являются числами. Именно для записи таких данных и введён тип numeric. Кроме, собственно дат и времени, его можно использовать для записи чисел в стандартном виде, комплексных чисел и много другого.

numeric — это слово, в записи которого могут использоваться только "числовые символы":
- Цифры: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9;
- Буквы: A, B, C, D, E, F, I, X, a, b, c, d, e, f, i, x;
- Знаки: =+ - , . / : | ^=.

Пример:

#+begin_example
  7
  2.7
  1/99
  12.34.56
  -+78:1|^3/4,67.0
#+end_example

Как видно из примера, главная особенность =numeric= в том, что он позволяет представить в виде единого типа многие данные, основанные на числах, которые не укладываются в парадигму численных типов. При этом, специальные знаки, используемые в записи =numeric=-слов имеют определённые значения:

- =+= и =-= используются по их прямому математическому назначению;
- =,= и =.= используются для записи десятичных дробей. Кроме того, =,= может быть использована для записи последовательностей целых чисел и десятичных дробей с =.=;
- =/= может иметь два значения: в качестве дробной черты для записи обыкновенных дробей и дат;
- =:= может быть использована для записи времени;
- =|= используется для записи комплексных чисел;
- =^= используется для записи степеней.

Кроме того, особенное значение имеют буквы:
- =A..F= и =a..f= используются для записи шестнадцатиричных чисел;
- I и i используются для обозначения бесконечности;
- X и x нужны для представления записи чисел с указанием системы счисления. При том, в LN синтаксически разрешено использовать любое основание для системы счисления N, такое, что N < 16. Это означает, что запись =12xaaa= вполне верна.

При этом, важно понимать, что все указанные толкования являются рекомендованными и используются в указанном смысле только внутри LN. Это означает, что программист может использовать все возможности =numeric= по собственному почину, не обращая внимания на рекомендации.
