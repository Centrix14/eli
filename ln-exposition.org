#+title: «LN exposition»
#+author: Centrix14
#+startup: overview

* «Изложение» языка программирования LN
Это «Изложение» LN — полное описание LN.

Soon, I will translate it on English.

** Общие сведения
LN — это язык прокурсионного программирования (от лат. procursus — развитие) и правило-ориентированного программирования. Это означает, что в LN программа есть /целое/, она не делится на модули, на дискретные единицы вообще (функции, процедуры, классы и т.д.) Это не отменяет того, что в рамках одной программы могут быть выделены /органы/, отвечающие за что-то конкретное. Тем не менее, /органы/ не мыслятся как нечто отдельное от всей программы в целом. Программа в прокурсионном программировании мыслится как живой организм, подверженный изменениям.

Основой LN служат Нормальные алгоритмы Маркова (собственно, от них же и произошло название языка: Language of Normal algorithms). Это означает, что вся семантика языка, завязана на правилах и исходных состояниях. 

** Основные понятия
- Слово — любая /совокупность/ символов, ограниченная пробелами. Служит своего рода клеткой (по аналогии с живыми организмами);
- Последовательность — любая /совокупность/ _слов_, ограниченная специальными словами: =[= и =]=.
- Порядок — /совокупность/ _слов_, выступающая как код (программа). В сущности, _последовательность_ и _порядок_ — одно и то же, разница в восприятии: последовательность, есть совокупность слов, выступающая как данные, порядок же, являет собой совокупность слов, выступающую как код. Кроме того, под порядками понимаются так же и конструкции встроенные в язык (как пример [[*rule]]). В этом смысле, слово «порядок» стоит воспринимать буквально: как заранее определённый порядок следования слов.
- Кроме того, _слово_ и _последовательность_ являются базовыми типами данных.

** Общие соглашения
При записи порядков используются следующие соглашения:
1. Записывается только левая часть порядка (левая часть правила, в терминах НАМ). Правая часть опускается.
   Пример: =my-order a b c=.
   
2. Порядки стоит строить в префиксной форме. Это означает, что если возможна префиксная запись порядка, то она предпочтительна. Возможны исключения: случаи, когда общепринятыми являются иные формы записи. Как пример, запись арифметических операций (инфиксная нотация) или факториала (постфиксная нотация).
   Пример:
   - =f x= (префиксная форма)
   - =a infix+ b= (инфиксная форма)
   
3. В записи порядков, для обозначения типа того или иного слова используются /заполнители/ — слова, обозначающие тип и, опционально, имя слова. Форма заполнителей такова: =.имя-типа=. Кроме того, заполнители могут быть /именоваными/, в таком случае, они выглядят так: =.тип:имя=.
   Пример:
   =var .word .word=
   =var .word:name .word:value=

** Основные порядки
*** rule
Первый и основной порядок В LN это =rule=. =rule= вводит в язык понятие правил подстановки, которые аналогичны таковым в НАМ. Существует лишь одно отличие: в НАМ правила определяются для отдельных символов или их совокупностей. В LN правила определяются для _слов_ и _последовательностей_. Порядок =rule= таков:

#+begin_example
  rule .word .word
  rule .word .seq
  rule .seq .word
  rule .seq .seq
#+end_example

Как можно видеть, за один раз (с применением =rule= единожды) можно задать только одно правило. Сами правила заданы для случаев:
- Слово → слово
- Слово → последовательность
- Последовательность → слово
- Последовательность → Последовательность

*** stop
Порядок =stop= введён в язык с одной единственной целью: предоставить полную реализацию НАМ, в которых, помимо простых правил подстановки, существуют и правила с завершением (=↦=).

Данный порядок в реальных программах использовать не рекомендуется, так как он является элементом императивного программирования, когда как LN — язык ориентированный на прокурсионность.

Форма порядка следующая:

#+begin_example
  stop
#+end_example

Как видно, он не принимает никаких аргументов, и в принципе, является предельно простым.

** Система типов
*** Общие сведения
Система типов LN является иерархической и выглядит так:

#+begin_example
  seq
  └── word
      ├── numeric
      │   └── complex
      │       ├── rational
      │       │   └── integer
      │       └── fraction
      └── symbolic
          ├── character
          └── string
#+end_example

*** Тип =seq=
Тип =seq= является фундаментальным типом языка LN, Он так же является и наиболее общим.

=seq= — это /совокупность/ _слов_, ограниченная специальными словами =[= и =]=.

Пример:

#+begin_example
  [ 3 "excellent" words ]
#+end_example
