#+title: ELI - Early (and Experimental) LN Interpter
#+author: Centrix14
#+startup: overview

* Notes
Должен быть класс =Parser=, описывающий состояние парсера. Он: хранит в
себе буфер слова, выражения, источник данных, и проч. Источники данных
могут быть следующие: файл, строка.

Есть метод =pars-char= - он обрабатывает один символ, возвращая новое
состояние парсера. Есть макросы типа =with-pars-by-word= которые
позволяют вычислять какой-либо код после обработки очередного слова
(или другого объекта).

* ELI development
** Versions
*** 0.1
- Pars by words

*** 0.2
- Can pars sequenses

** TODO Parser [0/3]
- [-] Create =parser= class
- [ ] Create pars by words
- [ ] Create possibility for parsing of sequences

* System definitions
** =eli= system definition
#+name: eli system definition
#+begin_src lisp :tangle eli.asd
  (defsystem "eli"
    :description "ELI — Early (and Experimental) LN Interpreter"
    :version "0.0"
    :author "Centrix14"
    :maintainer "Centrix14"
    :homepage "https://github.com/Centrix14/eli"
    :licence "GNU GPL v3"
    :depends-on (:asdf)
    :components ((:file "src/parser/parser")
                 (:file "src/parser/auxiliary")))
#+end_src

** =eli= system loader
#+name: eli system loader
#+begin_src lisp :tangle eli.lisp
  (require :asdf)

  (asdf:load-asd (merge-pathnames "eli.asd" (uiop:getcwd)))
  (asdf:load-system :eli)
#+end_src

** =eli= tests definition
#+name: eli tests definition
#+begin_src lisp :tangle eli-tests.asd
  (defsystem "eli-tests"
    :description "ELI tests"
    :licence "GNU GPL v3"
    :depends-on (:asdf)
    :components ((:file "t/parser/pars-char")))
#+end_src

** =eli= tests loader
#+name: eli tests loader
#+begin_src lisp :tangle eli-tests.lisp
  (require :asdf)

  (asdf:load-asd (merge-pathnames "eli.asd" (uiop:getcwd)))
  (asdf:load-asd (merge-pathnames "eli-tests.asd" (uiop:getcwd)))

  (asdf:load-system :eli)
  (asdf:load-system :eli-tests)
#+end_src

* Parser
** =parser= package
#+name: parser package
#+begin_src lisp :tangle src/parser/parser.lisp
  (defpackage :eli-parser
    (:use :common-lisp)
    (:export :parser
             :parser-buffer-word
             :parser-buffer-expression
             :parser-buffer-delimiter

             :eval-nestings))
#+end_src

** =parser= class
The =parser= class describes LN parser. It has following fileds:
- =buffer-word= — a _string_ containing current word. It has corresponding
  reader — =parser-buffer-word=.
- =buffer-expression= — a _vector_ of _strings_ containing current
  expression. It like =buffer-word= has corresponding reader —
  =parser-buffer-expression=.
- =buffer-delimiter= — a _string_ containing symbols that separate words.
  Like other fileds, has reader — =parser-buffer-delimiter=.
- =nesting-degree= — an _integer_ containing nesting degree of current
  word (=buffer-word=). The lowest degree is 0. With each
  =nesting-booster= nesting grow by 1, with each =nesting-reducer= —
  shrinks by 1.
- =nesting-booster= — a _string_, containing word, that increments =nesting-degree=
- =nesting-reducer= — a string, containing word, that decrements =nesting-degree=

#+name: parser class
#+begin_src lisp :tangle src/parser/parser.lisp
  (defclass parser ()
    ;; buffers
    ((buffer-word :reader parser-buffer-word
                  :initarg :buffer-word
                  :initform (make-array 0
                                        :fill-pointer 0
                                        :adjustable t
                                        :element-type 'character)
                  :type string
                  :documentation "The word buffer")
     (buffer-expression :reader parser-buffer-expression
                        :initarg :buffer-expression
                        :initform (make-array 0
                                              :fill-pointer 0
                                              :adjustable t
                                              :element-type 'string)
                        :type vector
                        :documentation "The expression buffer")
     (buffer-delimiter :reader parser-buffer-delimiter
                       :initarg :buffer-delimiter
                       :initform " "
                       :type string
                       :documentation "The buffer of delimiters")

     ;; nesting
     (nesting-degree :reader parser-nesting-degree
                     :initarg :nesting-degree
                     :initform 0
                     :type integer
                     :documentation "Indicates nesting degree of current word")
     (nesting-booster :reader parser-nesting-booster
                      :initarg :nesting-booster
                      :initform "["
                      :type string
                      :documentation "Contains word, that increments nesting")
     (nesting-reducer :reader parser-nesting-reducer
                      :initarg :nesting-reducer
                      :initform "]"
                      :type string
                      :documentation "Contains word, that decrements nesting"))

    (:documentation "The parser class"))
#+end_src

** =parser= class methods
*** =pars-char= method
The =pars-char= method provides low-level functionality of the parser.
It takes only one character, and process it. Input characted may be
_delimiter_ or _regular_.

Important notes:
- _Direct_ using of this method is *not recommended*.
- This is a *pure* method: it is *not change* his arguments.

#+name: pars-char method
#+begin_src lisp :tangle src/parser/parser.lisp
  (defmethod pars-char ((parser-object parser) char)
    (with-slots (buffer-word buffer-expression buffer-delimiter) parser-object
      (if (delimiterp parser-object char)
          (pars-char-handle-delimiter parser-object)
          (pars-char-handle-regular parser-object char))))
#+end_src
p
In goals of simplicity and beautiful method uses _inner functions_:
=handle-delimiter= and =handle-regular=.

**** =pars-char-handle-delimiter= inner function
The =handle-delimiter= function handles delimiters and returns new state
of parser.

#+name: pars-char-handle-delimiter function
#+begin_src lisp :tangle src/parser/parser.lisp
  (defun pars-char-handle-delimiter (parser-object)
    (multiple-value-bind (current-nesting-degree updated-nesting-degree)
        (eval-nestings parser-object)
      (make-instance 'parser
                     :buffer-word (make-array 0
                                              :fill-pointer 0
                                              :adjustable t
                                              :element-type 'character)
                     :buffer-expression (concatenate
                                         'vector
                                         (parser-buffer-expression parser-object)
                                         (vector
                                          (list current-nesting-degree
                                                (parser-buffer-word parser-object))))
                     :buffer-delimiter (parser-buffer-delimiter parser-object)

                     :nesting-degree updated-nesting-degree
                     :nesting-booster (parser-nesting-booster parser-object)
                     :nesting-reducer (parser-nesting-reducer parser-object))))
#+end_src

**** =pars-char-handle-regular= inner function
Like =handle-delimiter=, =handle-regular= handles a regular character and
returns new state of parser.

#+name: pars-char-handle-regular function
#+begin_src lisp :tangle src/parser/parser.lisp
  (defun pars-char-handle-regular (parser-object char)
    (make-instance 'parser
                   :buffer-word (concatenate 'string
                                             (slot-value parser-object 'buffer-word)
                                             (string char))
                   :buffer-expression (parser-buffer-expression parser-object)
                   :buffer-delimiter (parser-buffer-delimiter parser-object)

                   :nesting-degree (parser-nesting-degree parser-object)
                   :nesting-booster (parser-nesting-booster parser-object)
                   :nesting-reducer (parser-nesting-reducer parser-object)))
#+end_src

** Predicates
*** =delimiterp=
#+name: delimiterp predicate
#+begin_src lisp :tangle src/parser/parser.lisp
  (defun delimiterp (parser-object char)
    (with-slots (buffer-delimiter) parser-object
      (if (position char buffer-delimiter)
          t
          nil)))
#+end_src

** Auxiliary functions
*** =eval-nestings= function
#+name: eval-nesting auxiliary function
#+begin_src lisp :tangle src/parser/auxiliary.lisp
  (defun eval-nestings (parser-object)
    (with-slots (buffer-word nesting-degree
                 nesting-booster nesting-reducer) parser-object
      (cond
        ((string= buffer-word nesting-booster)
         (values nesting-degree (1+ nesting-degree)))

        ((string= buffer-word nesting-reducer)
         (values (1- nesting-degree) (1- nesting-degree)))

        (t
         (values nesting-degree nesting-degree)))))
#+end_src

* Tests
** parser tests
*** =pars-char= test
#+name: pars-char test
#+begin_src lisp :tangle t/parser/pars-char.lisp
  (let ((test-parser
          (make-instance 'parser
                         :buffer-delimiter " "))
        (test-string "abra [ cadabra [ var danbra [ zabra ] ] babra ] "))
    (loop for char across test-string do
      (setf test-parser (pars-char test-parser char)))
    (format t "~a~%" (parser-buffer-expression test-parser)))
#+end_src
