#+title: ELI - Early (and Experimental) LN Interpter
#+author: Centrix14
#+startup: overview

* ELI development
** Stages
*** TODO Parser [3/7]
- [X] Create =parser= class
- [X] Create pars words
- [X] Create pars sequences
- [ ] Decompose =parser= class
- [ ] Add print-object to all classes
- [ ] Add streams
- [ ] Add =pars-string= and =pars-file= methods

*** TODO Rule processing system [0/3]
- [ ] Create =rule= class
- [ ] Create =rule-storage= class
- [ ] Add tasks

* System definitions
** =eli= system definition
#+name: eli system definition
#+begin_src lisp :tangle eli.asd
  (defsystem "eli"
    :description "ELI — Early (and Experimental) LN Interpreter"
    :version "0.0"
    :author "Centrix14"
    :maintainer "Centrix14"
    :homepage "https://github.com/Centrix14/eli"
    :licence "GNU GPL v3"
    :depends-on (:asdf)
    :components ((:file "src/parser/parser")
                 (:file "src/parser/auxiliary")))
#+end_src

** =eli= system loader
#+name: eli system loader
#+begin_src lisp :tangle eli.lisp
  (require :asdf)

  (asdf:load-asd (merge-pathnames "eli.asd" (uiop:getcwd)))
  (asdf:load-system :eli)
#+end_src

** =eli= tests definition
#+name: eli tests definition
#+begin_src lisp :tangle eli-tests.asd
  (defsystem "eli-tests"
    :description "ELI tests"
    :licence "GNU GPL v3"
    :depends-on (:asdf :eli)
    :components ((:file "t/parser/pars-char")))
#+end_src

** =eli= tests loader
#+name: eli tests loader
#+begin_src lisp :tangle eli-tests.lisp
  (require :asdf)

  (asdf:load-asd (merge-pathnames "eli.asd" (uiop:getcwd)))
  (asdf:load-asd (merge-pathnames "eli-tests.asd" (uiop:getcwd)))

  (asdf:load-system :eli)
  (asdf:load-system :eli-tests)
#+end_src

** =eli= examples definition
#+begin_src lisp :tangle eli-examples.asd
  (defsystem "eli-examples"
    :description "Examples for ELI"
    :licence "GNU GPL v3"
    :depends-on (:asdf :eli)
    :components ((:file "examples/parser-class")
                 (:file "examples/pars-char")
                 (:file "examples/delimiterp")))
#+end_src

** =eli= examples loader
#+begin_src lisp :tangle eli-examples.lisp
  (require :asdf)

  (asdf:load-asd (merge-pathnames "eli.asd" (uiop:getcwd)))
  (asdf:load-asd (merge-pathnames "eli-examples.asd" (uiop:getcwd)))

  (asdf:load-system :eli)
  (asdf:load-system :eli-examples)
#+end_src

* Parser
** =parser= package
This is a description of eli-parser package.

#+name: parser package
#+begin_src lisp :tangle src/parser/parser.lisp
  (defpackage :eli-parser
    (:use :common-lisp)
    (:export :parser
             :parser-buffer-word
             :parser-buffer-expression
             :parser-buffer-delimiter

             :eval-nestings))
#+end_src

** =parser= class
The =parser= class describes LN parser. It has following fileds:
- =buffer-word= — a _string_ containing current word. It has corresponding
  reader — =parser-buffer-word=.
- =buffer-expression= — a _vector_ of _lists_ containing current
  expression. It like =buffer-word= has corresponding reader —
  =parser-buffer-expression=.
  Lists in buffer looks like this: =(nesting-degree word)=. For more
  detailed example see [[Parser usage]].
- =buffer-delimiter= — a _string_ containing symbols that separate words.
  Like other fileds, has reader — =parser-buffer-delimiter=.
- =nesting-degree= — an _integer_ containing nesting degree of current
  word (=buffer-word=). The lowest degree is 0. With each
  =nesting-booster= nesting grow by 1, with each =nesting-reducer= —
  shrinks by 1.
- =nesting-booster= — a _string_, containing word, that increments =nesting-degree=
- =nesting-reducer= — a _string_, containing word, that decrements =nesting-degree=

#+name: parser class
#+begin_src lisp :tangle src/parser/parser.lisp
  (defclass parser ()
    ;; buffers
    ((buffer-word :reader parser-buffer-word
                  :initarg :buffer-word
                  :initform (make-array 0
                                        :fill-pointer 0
                                        :adjustable t
                                        :element-type 'character)
                  :type string
                  :documentation "The word buffer")
     (buffer-expression :reader parser-buffer-expression
                        :initarg :buffer-expression
                        :initform (make-array 0
                                              :fill-pointer 0
                                              :adjustable t
                                              :element-type 'string)
                        :type vector
                        :documentation "The expression buffer")
     (buffer-delimiter :reader parser-buffer-delimiter
                       :initarg :buffer-delimiter
                       :initform " "
                       :type string
                       :documentation "The buffer of delimiters")

     ;; nesting
     (nesting-degree :reader parser-nesting-degree
                     :initarg :nesting-degree
                     :initform 0
                     :type integer
                     :documentation "Indicates nesting degree of current word")
     (nesting-booster :reader parser-nesting-booster
                      :initarg :nesting-booster
                      :initform "["
                      :type string
                      :documentation "Contains word, that increments nesting")
     (nesting-reducer :reader parser-nesting-reducer
                      :initarg :nesting-reducer
                      :initform "]"
                      :type string
                      :documentation "Contains word, that decrements nesting")

     ;; sources
     (source-type :reader parser-source-type
                  :initarg :source-type
                  :initform 'string
                  :type symbol
                  :documentation "Describes type of the source from which data is taken")
     (source :reader parser-source
             :initarg :source
             :documentation "Stores the data source"))

    (:documentation "The parser class"))
#+end_src

<<Parser usage>> example:

#+begin_src lisp :tangle examples/parser-class.lisp
  (let ((my-parser (make-instance 'parser
                                  :buffer-word "Just-an-initial-word"
                                  :buffer-expression #((0 "First")
                                                       (0 "Second")
                                                       (0 "Third"))
                                  :buffer-delimiter (vector #\Space
                                                            #\Tab
                                                            #\Newline)
                                  :nesting-degree 0
                                  :nesting-booster "("
                                  :nesting-reducer ")")))
    (format t "Parser class example~%~%~a ~a ~a ~a ~a ~a~%"
            (parser-buffer-word my-parser)
            (parser-buffer-expression my-parser)
            (parser-buffer-delimiter my-parser)
            (parser-nesting-degree my-parser)
            (parser-nesting-booster my-parser)
            (parser-nesting-reducer my-parser)))
#+end_src

In this piece of code we create new instance of =parser= and initialize
it with following data:
- =buffer-word= is a "Just-an-initial-word".
- =buffer-expression= contains vector of words "First", "Second" and
  "Third" all with nesting degree 0.
- =buffer-delimiter= filled with space, tab and newline characters.
- =nesting-degree= initial value is 0.
- =nesting-booster= is a "(".
- =nesting-reducer= is a ")".

Then, we print value of each slot using readers.

** =parser= class methods
*** =pars-char= method
The =pars-char= method provides low-level functionality of the parser
(see [[* =parser= class]]). It takes only one character, and process it.
Input characted may be _delimiter_ or _regular_.

Important notes:
- _Direct_ using of this method is *not recommended*.
- This is a *pure* method: it is *not change* his arguments.

#+name: pars-char method
#+begin_src lisp :tangle src/parser/parser.lisp
  (defmethod pars-char ((parser-object parser) char)
    (with-slots (buffer-word buffer-expression buffer-delimiter) parser-object
      (if (delimiterp parser-object char)
          (pars-char-handle-delimiter parser-object)
          (pars-char-handle-regular parser-object char))))
#+end_src

Usage:

#+begin_src lisp :eval no :tangle examples/pars-char.lisp
  (let ((my-parser (make-instance 'parser
                                  :buffer-delimiter (vector #\Space
                                                            #\Tab
                                                            #\Newline)))
        (my-line
          "This is a line with spaces
  This is a line with	tabs
  And, this is a newline
  "))
    (format t "~%~%pars-char example~%~%")
    (loop for c across my-line do
      (setf my-parser (pars-char my-parser c)))
    (format t "~a~%" (parser-buffer-expression my-parser)))
#+end_src

In goals of simplicity and beautiful method uses _inner functions_:
=handle-delimiter= and =handle-regular=.

**** =pars-char-handle-delimiter= inner function
The =handle-delimiter= function handles delimiters and returns new state
of parser.

#+name: pars-char-handle-delimiter function
#+begin_src lisp :tangle src/parser/parser.lisp
  (defun pars-char-handle-delimiter (parser-object)
    (multiple-value-bind (current-nesting-degree updated-nesting-degree)
        (eval-nestings parser-object)
      (make-instance 'parser
                     :buffer-word (make-array 0
                                              :fill-pointer 0
                                              :adjustable t
                                              :element-type 'character)
                     :buffer-expression (concatenate
                                         'vector
                                         (parser-buffer-expression parser-object)
                                         (vector
                                          (list current-nesting-degree
                                                (parser-buffer-word parser-object))))
                     :buffer-delimiter (parser-buffer-delimiter parser-object)

                     :nesting-degree updated-nesting-degree
                     :nesting-booster (parser-nesting-booster parser-object)
                     :nesting-reducer (parser-nesting-reducer parser-object))))
#+end_src

**** =pars-char-handle-regular= inner function
Like =handle-delimiter=, =handle-regular= handles a regular character and
returns new state of parser.

#+name: pars-char-handle-regular function
#+begin_src lisp :tangle src/parser/parser.lisp
  (defun pars-char-handle-regular (parser-object char)
    (make-instance 'parser
                   :buffer-word (concatenate 'string
                                             (slot-value parser-object 'buffer-word)
                                             (string char))
                   :buffer-expression (parser-buffer-expression parser-object)
                   :buffer-delimiter (parser-buffer-delimiter parser-object)

                   :nesting-degree (parser-nesting-degree parser-object)
                   :nesting-booster (parser-nesting-booster parser-object)
                   :nesting-reducer (parser-nesting-reducer parser-object)))
#+end_src

** Predicates
*** =delimiterp=
#+name: delimiterp predicate
#+begin_src lisp :tangle src/parser/parser.lisp
  (defun delimiterp (parser-object char)
    (with-slots (buffer-delimiter) parser-object
      (if (position char buffer-delimiter)
          t
          nil)))
#+end_src

This predicate examine if =char= is a delimiter.

#+begin_src lisp :tangle examples/delimiterp.lisp
  (let ((my-parser (make-instance 'parser
                                  :buffer-delimiter " ")))
    (format t "~%~%delimiterp example~%~a~%" (delimiterp my-parser #\Space)))
#+end_src

** Auxiliary functions
*** =eval-nestings= function
=eval-nestings= auxiliary function returns following parameters:
- =current-nesting-degree= — nesting of current word
- =updated-nesting-degree= — nesting of all next words

These parameters used at [[* =pars-char-handle-delimiter= inner function]]
for processing nesting-booster and nesting-reducer with following
logic:
- If current word is a nesting-booster (see [[* =parser= class]]), then it's nesting is a nesting
  of previous word, and nesting of next words will be increased by 1.
- If current word is a nesting-reducer (see [[* =parser= class]]), then it's nesting and nesting
  of all next words will be decreased by 1.

Note: parameters returning in this order: =current-nesting-degree= =updated-nesting-degree=.

#+name: eval-nesting auxiliary function
#+begin_src lisp :tangle src/parser/auxiliary.lisp
  (defun eval-nestings (parser-object)
    (with-slots (buffer-word nesting-degree
                 nesting-booster nesting-reducer) parser-object
      (cond
        ((string= buffer-word nesting-booster)
         (values nesting-degree (1+ nesting-degree)))

        ((string= buffer-word nesting-reducer)
         (values (1- nesting-degree) (1- nesting-degree)))

        (t
         (values nesting-degree nesting-degree)))))
#+end_src

* Tests
** parser tests
*** =pars-char= test
#+name: pars-char test
#+begin_src lisp :tangle t/parser/pars-char.lisp
  (let ((test-parser
          (make-instance 'parser
                         :buffer-delimiter (vector #\Space #\Tab)))
        (test-string "abra [ cadabra [ var danbra [ zabra ] ] babra ] "))
    (loop for char across test-string do
      (setf test-parser (pars-char test-parser char)))
    (format t "~a~%" (parser-buffer-expression test-parser)))
#+end_src
